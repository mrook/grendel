<?xml version="1.0" encoding="UTF-8"?>
<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
<xsl:strip-space elements="*"/>
<xsl:output method="text" indent="no"/>
	<xsl:template match="/">
		<xsl:text>#KEYWORD=_GENERATOR&#13;&#10;This helpfile was generated by docbook-to-ghp.xsl.&#13;&#10;#END=1000&#13;&#10;</xsl:text>
		<xsl:for-each select=".//section[@id = 'commands_player']/section|.//section[@id = 'commands_immortal']/section">
			<xsl:call-template name="command"/>
		</xsl:for-each>
	</xsl:template>

	<xsl:template name="command">
		<xsl:text>#KEYWORD=</xsl:text>
		<xsl:value-of select="normalize-space(title)"/>
		<xsl:text>&#13;&#10;#TYPE=COMMAND&#13;&#10;</xsl:text>
		<xsl:if test="para//link">
			<xsl:text>#RELATED=</xsl:text>
			<xsl:for-each select="para//link">
				<xsl:value-of select="."/>
				<xsl:if test="following-sibling::node()">
					<xsl:text>,</xsl:text>
				</xsl:if>
			</xsl:for-each>
			<xsl:text>&#13;&#10;</xsl:text>
		</xsl:if>
		<xsl:apply-templates select="cmdsynopsis|para"/>
		<xsl:choose>
			<xsl:when test="para[@userlevel]">
				<xsl:text>&#13;&#10;#END=</xsl:text>
				<xsl:value-of select="para/@userlevel"/>
				<xsl:text>&#13;&#10;</xsl:text>
			</xsl:when>
			<xsl:otherwise>
				<xsl:text>&#13;&#10;#END=0&#13;&#10;</xsl:text>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template>
	
	<xsl:template match="cmdsynopsis">
		<xsl:text>#SYNTAX=</xsl:text>
		<xsl:apply-templates/>
		<xsl:text>&#13;&#10;</xsl:text>
	</xsl:template>
	
	<xsl:template match="cmdsynopsis/command">
		<xsl:value-of select="."/>
		<xsl:text> </xsl:text>
	</xsl:template>
	
	<xsl:template match="cmdsynopsis/group">
		<xsl:choose>		
			<xsl:when test="@choice='req'">
				<xsl:text>{</xsl:text>
			</xsl:when>
			<xsl:otherwise>
				<xsl:text>[</xsl:text>
			</xsl:otherwise>
		</xsl:choose>
		<xsl:for-each select="arg|group">
			<xsl:apply-templates select="."/>
			<xsl:if test="following-sibling::node()">
				<xsl:text>| </xsl:text>
			</xsl:if>
		</xsl:for-each>
		<xsl:choose>
			<xsl:when test="@choice='req'">
				<xsl:text>}</xsl:text>
			</xsl:when>
			<xsl:otherwise>
				<xsl:text>]</xsl:text>
			</xsl:otherwise>
		</xsl:choose>
		<xsl:if test="following-sibling::node()">
			<xsl:text> </xsl:text>
		</xsl:if>
	</xsl:template>

	<xsl:template match="arg">
		<xsl:choose>
			<xsl:when test="@choice='plain'"/>
			<xsl:when test="@choice='req'">
				<xsl:text>{</xsl:text>
			</xsl:when>
			<xsl:otherwise>
				<xsl:text>[</xsl:text>
			</xsl:otherwise>
		</xsl:choose>
		<xsl:apply-templates/>
		<xsl:choose>
			<xsl:when test="@choice='plain'"/>
			<xsl:when test="@choice='req'">
				<xsl:text>}</xsl:text>
			</xsl:when>
			<xsl:otherwise>
				<xsl:text>]</xsl:text>
			</xsl:otherwise>
		</xsl:choose>
		<xsl:if test="following-sibling::node()">
			<xsl:text> </xsl:text>
		</xsl:if>
	</xsl:template>

	<xsl:template match="para//replaceable">'<xsl:value-of select="."/>'</xsl:template>	

	<xsl:template match="para//programlisting">
		<xsl:value-of select="translate(substring(., 0, string-length(.) - 3), '&#9;', '')"/>
	</xsl:template>
	
	<xsl:template match="para[@userlevel]">
		<xsl:text>Required level: </xsl:text>
		<xsl:value-of select="@userlevel"/>
		<xsl:text>&#13;&#10;&#13;&#10;</xsl:text>
	</xsl:template>
	
	<xsl:template match="para">
		<xsl:call-template name="paragraph">
			<xsl:with-param name="content">
				<xsl:apply-templates/>
			</xsl:with-param>
		</xsl:call-template>
		<xsl:if test="following-sibling::node() and count(following-sibling::node()[position()=1]/link) = 0">
			<xsl:text>&#13;&#10;&#13;&#10;</xsl:text>
		</xsl:if>
	</xsl:template>
	
	<!-- kill elements with related links, we save this to #RELATED, see above -->
	<xsl:template match="para[link]"/>
	
	<xsl:template name="paragraph">
		<xsl:param name="content"/>
		<xsl:copy-of select="normalize-space($content)"/>
	</xsl:template>
</xsl:stylesheet>
